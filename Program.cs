using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading;
using ParkingSystem.BLL;
using ParkingSystem.Data;

namespace ParkingSystem
{
    internal class Program
    {
        private static readonly ParkingService service = new ParkingService(new ParkingContext());

        private static void Main()
        {
            DisplayLogo();

            try
            {
                using var ctx = new ParkingContext();
                ctx.Database.CanConnect();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine(" –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!");
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine(" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:");
                Console.WriteLine(ex.Message);
            }
            finally
            {
                Console.ResetColor();
            }

            AnimateLoading("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã...");

            while (true)
            {
                Console.Clear();
                DisplayMenu();
                Console.Write("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-13): ");
                string c = Console.ReadLine() ?? "";
                try
                {
                    switch (c)
                    {
                        case "1": PrintTable(service.GetAllOwners()); break;
                        case "2": PrintTable(service.GetAllVehicles()); break;
                        case "3": AddOwner(); break;
                        case "4": AddVehicle(); break;
                        case "5": PrintTable(service.GetAllSpaces()); break;
                        case "6": StartParking(); break;
                        case "7": EndParking(); break;
                        case "8": PrintTable(service.GetTickets()); break;
                        case "9": RemoveOwner(); break;
                        case "10": RemoveVehicle(); break;
                        case "11": RemoveSpace(); break;
                        case "12": RemoveTicket(); break;
                        case "13": SearchParkingByLicensePlate(); break;
                        case "0": ExitProgram(); return;
                        default: DisplayError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."); break;
                    }
                }
                catch (Exception ex)
                {
                    DisplayError($"–û—à–∏–±–∫–∞: {ex.Message}");
                }

                Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
                Console.ReadKey();
            }
        }

        private static void DisplayLogo()
        {
            Console.ForegroundColor = ConsoleColor.Magenta;
            Console.WriteLine(@"
   ____  _       _         ____  _                 _            
  / ___|| | __ _| |_ ___  |  _ \| | __ _ _ __   __| | ___ _ __  
 | |    | |/ _` | __/ _ \ | |_) | |/ _` | '_ \ / _` |/ _ \ '__| 
 | |___ | | (_| | ||  __/ |  _ <| | (_| | | | | (_| |  __/ |    
  \____|_|_\__,_|\__\___| |_| \_\_|\__,_|_| |_|_\__,_|\___|_|    
");
            Console.ResetColor();
            Console.WriteLine($"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {DateTime.Now:dd.MM.yyyy HH:mm:ss} PDT\n");
        }

        private static void AnimateLoading(string message)
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            foreach (char c in message)
            {
                Console.Write(c);
                Thread.Sleep(30);
            }
            for (int i = 0; i < 3; i++)
            {
                Console.Write(".");
                Thread.Sleep(200);
            }
            Console.WriteLine("\n");
            Console.ResetColor();
        }

        private static void DisplayMenu()
        {
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("\n===    –ü–ê–†–ö–û–í–û–ß–ù–ê–Ø –°–ò–°–¢–ï–ú–ê         ===");
            Console.WriteLine("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            string[] options = {
                "1. –°–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤",
                "2. –°–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω",
                "3. –î–æ–±–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                "4. –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É",
                "5. –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç",
                "6. –ù–∞—á–∞—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É",
                "7. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–∞—Ä–∫–æ–≤–∫—É",
                "8. –ü–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–µ—Ç—ã",
                "9. –£–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                "10. –£–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É",
                "11. –£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ",
                "12. –£–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç",
                "13. –ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ",
                "0. –í—ã—Ö–æ–¥"
            };

            foreach (string option in options)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.Write("‚û§ ");
                Console.ForegroundColor = ConsoleColor.White;
                Console.WriteLine(option);
            }
            Console.ResetColor();
        }

        private static void DisplayError(string message)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"\n‚ùå {message} ‚ùå");
            Console.ResetColor();
        }

        private static void DisplaySuccess(string message)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine($"\nüåü {message} üåü");
            Console.ResetColor();
        }

        private static void ExitProgram()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞! üòä");
            Console.ResetColor();
            Thread.Sleep(1000);
        }

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü (—á–µ—Ä–µ–∑ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ)
        private static void PrintTable(IEnumerable<object> rows)
        {
            var list = rows?.ToList() ?? new List<object>();
            if (list.Count == 0)
            {
                DisplayError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
                return;
            }

            var props = list.First().GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
            var headers = props.Select(p => p.Name).ToArray();
            var table = new List<string[]>();

            foreach (var item in list)
            {
                table.Add(props.Select(p =>
                {
                    var val = p.GetValue(item);
                    if (val is bool b && p.Name == "IsOccupied")
                        return b ? "–ó–∞–Ω—è—Ç–æ" : "–°–≤–æ–±–æ–¥–Ω–æ";
                    return val?.ToString() ?? "";
                }).ToArray());
            }

            int cols = headers.Length;
            int[] widths = new int[cols];
            for (int i = 0; i < cols; i++)
            {
                widths[i] = headers[i].Length;
                foreach (var row in table)
                    widths[i] = Math.Max(widths[i], row[i].Length);
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write("‚ï≠");
            for (int i = 0; i < cols; i++)
            {
                Console.Write(new string('‚îÄ', widths[i] + 2));
                if (i < cols - 1) Console.Write("‚î¨");
            }
            Console.WriteLine("‚ïÆ");

            Console.Write("‚îÇ ");
            for (int i = 0; i < cols; i++)
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.Write(headers[i].PadRight(widths[i]) + " ‚îÇ ");
            }
            Console.WriteLine();
            Console.ResetColor();

            Console.Write("‚îú");
            for (int i = 0; i < cols; i++)
            {
                Console.Write(new string('‚îÄ', widths[i] + 2));
                if (i < cols - 1) Console.Write("‚îº");
            }
            Console.WriteLine("‚î§");

            foreach (var row in table)
            {
                Console.Write("‚îÇ ");
                for (int i = 0; i < cols; i++)
                {
                    Console.ForegroundColor = ConsoleColor.White;
                    Console.Write(row[i].PadRight(widths[i]) + " ‚îÇ ");
                }
                Console.WriteLine();
                Console.ResetColor();
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write("‚ï∞");
            for (int i = 0; i < cols; i++)
            {
                Console.Write(new string('‚îÄ', widths[i] + 2));
                if (i < cols - 1) Console.Write("‚î¥");
            }
            Console.WriteLine("‚ïØ");
            Console.ResetColor();
        }

        // ====== –§–û–†–ú–´ ======

        private static void AddOwner()
        {
            Console.Write("–§–∞–º–∏–ª–∏—è: "); var ln = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(ln)) throw new Exception("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");

            Console.Write("–ò–º—è: "); var fn = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(fn)) throw new Exception("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");

            // >>> –∞–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ +7 –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            Console.Write("–¢–µ–ª–µ—Ñ–æ–Ω: +7");
            string tail = Console.ReadLine() ?? ""; // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
            tail = tail.Trim();

            string ph;
            if (tail.StartsWith("+7")) ph = tail;
            else if (tail.StartsWith("8")) ph = "+7" + tail.Substring(1);
            else ph = "+7" + tail;

            Console.Write("Email: "); var em = Console.ReadLine();

            service.AddOwner(fn, ln, ph, em);
            DisplaySuccess("–í–ª–∞–¥–µ–ª–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω!");
        }

        private static void AddVehicle()
        {
            Console.Write("–ì–æ—Å–Ω–æ–º–µ—Ä: "); var lp = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(lp)) throw new Exception("–ì–æ—Å–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            Console.Write("–ú–∞—Ä–∫–∞: "); var mk = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(mk)) throw new Exception("–ú–∞—Ä–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
            Console.Write("–ú–æ–¥–µ–ª—å: "); var md = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(md)) throw new Exception("–ú–æ–¥–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π");
            Console.Write("–¶–≤–µ—Ç: "); var cl = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(cl)) throw new Exception("–¶–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            Console.Write("–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–§–∞–º–∏–ª–∏—è –ò–º—è): "); var ownerName = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(ownerName)) throw new Exception("–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.AddVehicle(lp, mk, md, cl, ownerName);
            DisplaySuccess("–ú–∞—à–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
        }

        private static void StartParking()
        {
            var free = service.GetFreeSpaces().ToList();
            if (free.Count == 0)
            {
                DisplayError("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç.");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("\n–°–≤–æ–±–æ–¥–Ω—ã–µ –ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–µ –º–µ—Å—Ç–∞:");
                Console.ResetColor();
                PrintTable(free);
            }

            Console.Write("–ì–æ—Å–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: "); var v = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(v)) throw new Exception("–ì–æ—Å–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.StartParking(v);
            DisplaySuccess("–ü–∞—Ä–∫–æ–≤–∫–∞ –Ω–∞—á–∞—Ç–∞!");
        }

        private static void EndParking()
        {
            Console.Write("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TICK-001): "); var t = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(t)) throw new Exception("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.EndParking(t);
            DisplaySuccess("–ü–∞—Ä–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        }

        private static void RemoveOwner()
        {
            Console.Write("–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–§–∞–º–∏–ª–∏—è –ò–º—è): "); var name = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(name)) throw new Exception("–§–ò–û –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.RemoveOwner(name);
            DisplaySuccess("–í–ª–∞–¥–µ–ª–µ—Ü —É–¥–∞–ª–µ–Ω!");
        }

        private static void RemoveVehicle()
        {
            Console.Write("–ì–æ—Å–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã: "); var lp = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(lp)) throw new Exception("–ì–æ—Å–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.RemoveVehicle(lp);
            DisplaySuccess("–ú–∞—à–∏–Ω–∞ —É–¥–∞–ª–µ–Ω–∞!");
        }

        private static void RemoveSpace()
        {
            Console.Write("–ù–æ–º–µ—Ä –º–µ—Å—Ç–∞: "); var num = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(num)) throw new Exception("–ù–æ–º–µ—Ä –º–µ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.RemoveSpace(num);
            DisplaySuccess("–ü–∞—Ä–∫–æ–≤–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–æ!");
        }

        private static void RemoveTicket()
        {
            Console.Write("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TICK-001): "); var id = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(id)) throw new Exception("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            service.RemoveTicket(id);
            DisplaySuccess("–ë–∏–ª–µ—Ç —É–¥–∞–ª–µ–Ω!");
        }

        private static void SearchParkingByLicensePlate()
        {
            Console.Write("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: "); var plate = Console.ReadLine();
            if (string.IsNullOrWhiteSpace(plate)) throw new Exception("–ì–æ—Å–Ω–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
            var result = service.GetParkingSpaceByLicensePlate(plate);
            if (result.Any())
                PrintTable(result);
            else
                DisplayError("–ú–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –≥–æ—Å–Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞–Ω—è–ª–∞ –º–µ—Å—Ç–æ.");
        }
    }
}
